plugins {
	id 'java'
	id 'eclipse'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id "com.github.kt3k.coveralls" version "2.12.2"
	id 'jacoco'
}

group = 'com.happinesea'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(23)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-batch'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.19.1'
	//implementation 'org.springframework.batch:spring-batch-core'
	implementation 'org.flywaydb:flyway-core'
	implementation 'com.mysql:mysql-connector-j'
	
	//TODO delete? wait for RWS-lib
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework:spring-web:6.2.8'
    
    runtimeOnly 'com.h2database:h2'
//    implementation 'org.flywaydb:flyway-core'
    
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.batch:spring-batch-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}
//test {
//    finalizedBy jacocoTestReport // report is always generated after tests run
//}
jacocoTestReport {
    reports {
        html.required = true
        xml.required = true
        csv.required = false
    }
    afterEvaluate {
	    classDirectories.setFrom(classDirectories.files.collect {
	      fileTree(dir: it, excludes: ["com/happinesea/webcrawler/WebCrawlerApplication.class"])
	    })
	}
}

